controller_manager:
  ros__parameters:
    update_rate: 50
    # use_sim_time: true

    diff_controller:
      type: diff_drive_controller/DiffDriveController

    joint_broadcaster:
      type: joint_state_broadcaster/JointStateBroadcaster

diff_controller:
  ros__parameters:

    publish_rate: 20.0

    base_frame_id: base_footprint

    left_wheel_names: ['left_wheel_joint']
    right_wheel_names: ['right_wheel_joint']
    wheel_separation: 0.192
    wheel_radius: 0.033

    use_stamped_vel: false

    # open_loop: false 

    # wheels_per_side: x
    wheel_separation_multiplier: 0.9000
    left_wheel_radius_multiplier: 0.9800
    right_wheel_radius_multiplier: 0.9800

    odom_frame_id: odom
    # pose_covariance_diagonal: x
    # twist_covariance_diagonal: x
    open_loop: true
    enable_odom_tf: true

    cmd_vel_timeout: 0.5
    # publish_limited_velocity: x
    # velocity_rolling_window_size: x
    

    # Velocity and acceleration limits
    # Whenever a min_* is unspecified, default to -max_*
    linear.x.has_velocity_limits: true
    linear.x.has_acceleration_limits: true
    linear.x.has_jerk_limits: false
    linear.x.max_velocity: 0.1        # default 1.0   m/s^1
    linear.x.min_velocity: 0.0        # default -1.0  m/s^1
    linear.x.max_acceleration: 2.0    # default 1.0   m/s^2
    linear.x.max_jerk: 0.0            # m/s^3 ( rate of change of linear acceleration)
    linear.x.min_jerk: 0.0

    angular.z.has_velocity_limits: true
    angular.z.has_acceleration_limits: true
    angular.z.has_jerk_limits: false
    angular.z.max_velocity: 1.0       # default 1.0 rad/s^1
    angular.z.min_velocity: -1.0      # default 1.0
    angular.z.max_acceleration: 2.0   # default 1.0 rad/s^2
    angular.z.min_acceleration: -2.0  # default 1.0
    angular.z.max_jerk: 0.0           # rad/s^3 ( rate of change of angular acceleration )
    angular.z.min_jerk: 0.0
    pose_covariance_diagonal: [0.01, 0.01, 0.0, 0.0, 0.0, 0.1] # Odometry covariance for the encoder output of the robot for the pose. These values should be tuned to your robot's sample odometry data, but these values are a good place to start: ``[0.001, 0.001, 0.001, 0.001, 0.001, 0.01
    twist_covariance_diagonal: [0.01, 0.01, 0.0, 0.0, 0.0, 0.1] # Odometry covariance for the encoder output of the robot for the speed. These values should be tuned to your robot's sample odometry data, but these values are a good place to start: ``[0.001, 0.001, 0.001, 0.001, 0.001, 0.01]  




# joint_broadcaster:
#   ros__parameters:
